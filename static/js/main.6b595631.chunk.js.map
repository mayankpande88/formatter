{"version":3,"sources":["component/input-box/InputCard.js","component/output-box/OutputCard.js","component/card-buttons/CardButtons.js","App.js","serviceWorker.js","index.js"],"names":["InputCard","_ref","inputText","inputChange","react_default","a","createElement","rows","cols","className","onChange","value","OutputCard","props","outputText","readOnly","CardButtons","buttonClick","onClick","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInputChange","event","setState","target","state","onButtonClick","innerHTML","_this$state","xmlChecker","check","prettify","error","name","line","column","message","jsObj","JSON","parse","stringify","sqlFormatter","format","component_input_box_InputCard","card_buttons_CardButtons","component_output_box_OutputCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oWAWeA,eATC,SAAAC,GAA8B,IAA5BC,EAA4BD,EAA5BC,UAAWC,EAAiBF,EAAjBE,YAC3B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YAAWC,KAAK,KAAKC,KAAK,KAAKC,UAAU,sDAAsDC,SAAUP,EAAaQ,MAAOT,OCMpHU,SATE,SAACC,GAChB,OACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YAAUC,KAAK,KAAKC,KAAK,KAAKC,UAAU,sDAAsDE,MAAOE,EAAMC,WAAYC,UAAQ,aCUtHC,MAbf,SAAAf,GAAoC,IAAdgB,EAAchB,EAAdgB,YACpB,OACEb,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBACdL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,2BAA2BS,QAASD,GAAtD,OACAb,EAAAC,EAAAC,cAAA,UAAQG,UAAU,wBAAwBS,QAASD,GAAnD,QACCb,EAAAC,EAAAC,cAAA,UAAQG,UAAU,yBAAyBS,QAASD,GAApD,OACDb,EAAAC,EAAAC,cAAA,UAAQG,UAAU,wBAAwBS,QAASD,GAAnD,YCwFYE,cAtFb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QASFI,cAAgB,SAACC,GACfR,EAAKS,SAAS,CAAE3B,UAAW0B,EAAME,OAAOnB,QACxCS,EAAKS,SAAS,CAAEE,MAAM,MAZVX,EAcdY,cAAgB,SAACJ,GACa,QAAzBA,EAAME,OAAOG,WACdb,EAAKS,SAAS,CAAEE,MAAM,QAGI,SAAzBH,EAAME,OAAOG,WACdb,EAAKS,SAAS,CAAEE,MAAM,SAGI,QAAzBH,EAAME,OAAOG,WACdb,EAAKS,SAAS,CAAEE,MAAM,QAEK,UAAzBH,EAAME,OAAOG,WACfb,EAAKS,SAAS,CAAEE,MAAM,WAzBxBX,EAAKW,MAAQ,CACX7B,UAAW,GACXY,WAAW,GACXiB,MAAM,IALIX,wEA8BL,IAAAc,EACmCX,KAAKQ,MAArC7B,EADHgC,EACGhC,UAAWY,EADdoB,EACcpB,WAAWiB,EADzBG,EACyBH,MAE5B,GADAjB,EAAW,GACA,QAARiB,EAEC,IACII,IAAWC,MAAMlC,GACjBY,EAAWqB,IAAWE,SAASnC,GAEnC,MAAOoC,GACHxB,EAAa,eAAiBwB,EAAMC,KAAO,OAASD,EAAME,KAAO,IAAMF,EAAMG,OAAS,KAAOH,EAAMI,QAG3G,GAAW,SAARX,EAEC,IACI,IAAIY,EAAMC,KAAKC,MAAM3C,GACrBY,EAAW8B,KAAKE,UAAUH,EAAO,KAAM,MAE3C,MAAOL,GACHxB,EAAa,gBAAkBwB,EAAMI,QAG7C,GAAW,QAARX,EAEC,IACIjB,EAAWiC,IAAaC,OAAO9C,GAEnC,MAAOoC,GACHxB,EAAa,eAAiBwB,EAAMC,KAAO,OAASD,EAAME,KAAO,IAAMF,EAAMG,OAAS,KAAOH,EAAMI,YAG3F,UAARX,IACJjB,EAAW,GACXZ,EAAU,IAGpB,OACIE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBAEbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,eAAd,aACAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2C,EAAD,CAAW9C,YAAaoB,KAAKI,iBAE/BvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4C,EAAD,CAAajC,YAAaM,KAAKS,iBAEjC5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6C,EAAD,CAAYrC,WAAYA,cAhFlBsC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6b595631.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InputCard.css';\r\nconst InputCard=({inputText, inputChange }) =>{\r\n  return (\r\n    <div>\r\n    \t\t<textarea  rows=\"30\" cols=\"60\" className=\"fl black bg-near-white near-black  ma5 textarea pa3\" onChange={inputChange} value={inputText}>\r\n\t\t\t</textarea>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputCard;\r\n","import React from 'react';\r\nimport './OutputCard.css';\r\nconst OutputCard=(props) =>{\r\n  return (\r\n    <div >\r\n    \t\t<textarea rows=\"30\" cols=\"60\" className=\"fl black bg-near-white near-black  ma5 textarea pa4\" value={props.outputText} readOnly>\r\n\t\t\t</textarea>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OutputCard;\r\n","import React from 'react';\r\nimport  './CardButtons.css'\r\nfunction CardButtons({buttonClick}) {\r\n  return (\r\n    <div>\r\n\t\t<div className=\"flex flex-column\">\r\n\t\t\t<button className=\"tc grow pa3 ma2  bw2 mt6\" onClick={buttonClick}>XML</button>\r\n\t\t\t<button className=\"tc grow pa3 ma2  bw2 \" onClick={buttonClick}>JSON</button>\r\n\t\t\t\t<button className=\"tc grow  pa3 ma2  bw2 \" onClick={buttonClick}>SQL</button>\r\n\t\t\t<button className=\"tc grow pa3 ma2  bw2 \" onClick={buttonClick}>RESET</button>\r\n\t\t</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardButtons;\r\n","import React, { Component } from 'react';\nimport xmlChecker from 'xmlchecker';\nimport sqlFormatter from \"sql-formatter\";\n\nimport './App.css';\nimport InputCard from './component/input-box/InputCard'\n\nimport OutputCard from './component/output-box/OutputCard'\n\nimport CardButtons from './component/card-buttons/CardButtons'\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      inputText: '',\n      outputText:'',\n      state:''\n    }\n  }\n\n\n  onInputChange = (event) => {\n    this.setState({ inputText: event.target.value })\n    this.setState({ state:'' })\n  }\n  onButtonClick = (event) => {\n    if(event.target.innerHTML===\"XML\"){\n      this.setState({ state:\"XML\"})\n    }\n\n    if(event.target.innerHTML===\"JSON\"){\n      this.setState({ state:\"JSON\"})\n    }\n\n    if(event.target.innerHTML===\"SQL\"){\n      this.setState({ state:\"SQL\"})\n    }\n     if(event.target.innerHTML===\"RESET\"){\n      this.setState({ state:\"RESET\"})\n    }\n  }\n  render() {\n        var { inputText, outputText,state } = this.state;\n        outputText='';\n        if(state==='XML'){\n            \n            try{\n                xmlChecker.check(inputText);\n                outputText=xmlChecker.prettify(inputText);\n            }\n            catch (error){\n                outputText = \"XML Parser: \" + error.name + \" at \" + error.line + \",\" + error.column + \": \" + error.message;\n            }\n        }\n        if(state==='JSON'){\n            \n            try{\n                var jsObj=JSON.parse(inputText);\n                outputText=JSON.stringify(jsObj, null, \"\\t\");\n                }\n            catch (error){\n                outputText = \"JSON Parser: \" + error.message;\n            }\n        }\n        if(state==='SQL'){\n            \n            try{\n                outputText=sqlFormatter.format(inputText);\n            }\n            catch (error){\n                outputText = \"XML Parser: \" + error.name + \" at \" + error.line + \",\" + error.column + \": \" + error.message;\n            }\n        }\n        else if(state==='RESET'){\n            outputText='';\n            inputText='';\n        }\n\n  return (   \n      <div className=\"flex flex-column\">\n\n        <h1 className=\"center grow\">Formatter</h1>\n        <div className=\"flex center\">\n          <div>\n            <InputCard inputChange={this.onInputChange}/>\n          </div>\n          <div>\n            <CardButtons buttonClick={this.onButtonClick}/>\n          </div>\n          <div>\n            <OutputCard outputText={outputText}/>\n          </div>\n        </div>\n    </div>\n  );  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}