{"version":3,"sources":["component/input-box/InputCard.js","component/output-box/OutputCard.js","component/card-buttons/CardButtons.js","App.js","serviceWorker.js","index.js"],"names":["InputCard","props","console","log","react_default","a","createElement","className","react_codemirror2","value","inputText","options","mode","state","theme","lineNumbers","onBeforeChange","inputChange","OutputCard","outputText","foldGutter","lineWrapping","extraKeys","Ctrl-Q","cm","foldCode","getCursor","gutters","CardButtons","_ref","buttonClick","onClick","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInputChange","editor","data","setState","onButtonClick","event","target","innerHTML","alert","_this$state","xmlChecker","prettify","error","name","line","column","message","jsObj","JSON","parse","stringify","sqlFormatter","format","class","react_github_btn","href","data-size","aria-label","component_input_box_InputCard","card_buttons_CardButtons","component_output_box_OutputCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e05aaca0.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Controlled as CodeMirror} from 'react-codemirror2';\r\nimport 'codemirror/mode/xml/xml';\r\nimport 'codemirror/mode/sql/sql';\r\nimport './InputCard.css';\r\nconst InputCard=(props) =>{\r\n\tconsole.log('inputParams= ',props);\r\n  return (\r\n  \t<div className='center h-80 w-40'>\r\n    \t<CodeMirror\r\n     \t\t\tvalue={props.inputText}\r\n  \t\t\t\toptions={{\r\n    \t\t\t\tmode: props.state,\r\n    \t\t\t\ttheme: 'material',\r\n    \t\t\t\tlineNumbers: true\r\n  \t\t\t\t\t}}\r\n  \t\t\t\tonBeforeChange={props.inputChange}\r\n\t\t\t\t\r\n\t\t/>\r\n\t</div>\r\n  );\r\n}\r\n\r\nexport default InputCard;\r\n","import React from 'react';\r\nimport './OutputCard.css';\r\nimport {Controlled as CodeMirror} from 'react-codemirror2';\r\nimport 'codemirror/mode/xml/xml';\r\nimport 'codemirror/mode/sql/sql';\r\nimport 'codemirror/addon/fold/foldgutter.js';\r\n\r\nconst OutputCard=(props) =>{\r\n\r\n  return (\r\n  \t \r\n    <div className=' center h-auto  w-40'>\r\n   \t\t\t {console.log(\"outputBox\",props)}\r\n    \t\t<CodeMirror \r\n            value={props.outputText}\r\n            options={{\r\n                      mode: props.state,\r\n                      theme: 'material',\r\n                      lineNumbers: true, \r\n                      foldGutter: true,\r\n                      lineWrapping: true,\r\n                      extraKeys: {\"Ctrl-Q\": function(cm){ cm.foldCode(cm.getCursor()); }},\r\n                      gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"]\r\n                    }} \r\n         />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OutputCard;\r\n  ","import React from 'react';\r\nimport  './CardButtons.css'\r\nfunction CardButtons({buttonClick}) {\r\n  return (\r\n    <div>\r\n\t\t<div className=\"flex flex-column\">\r\n\t\t\t<button className=\"tc grow pa3 ma2 mt6 button\" onClick={buttonClick}>XML</button>\r\n\t\t\t<button className=\"tc grow pa3 ma2 button\" onClick={buttonClick}>JSON</button>\r\n\t\t\t<button className=\"tc grow pa3 ma2 button \" onClick={buttonClick}>SQL</button>\r\n\t\t\t<button className=\"tc grow pa3 ma2 button\" onClick={buttonClick}>RESET</button>\r\n\t\t</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardButtons;\r\n","import React, { Component } from 'react';\nimport xmlChecker from 'xmlchecker';\nimport sqlFormatter from \"sql-formatter\";\nimport './App.css';\nimport InputCard from './component/input-box/InputCard';\nimport OutputCard from './component/output-box/OutputCard';\nimport CardButtons from './component/card-buttons/CardButtons';\nimport GitHubButton from 'react-github-btn';\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      inputText: '',\n      outputText:'',\n      state:''\n    }\n  }\n\n\n  onInputChange = (editor, data, value) => {\n    this.setState({ inputText: value });\n    this.setState({ state:'' });\n  }\n  onButtonClick = (event) => {\n    if(this.state.inputText===''){\n      alert(\"Please enter inputText\");\n      return;\n    }\n    if(event.target.innerHTML===\"XML\"){\n      this.setState({ state:\"xml\"})\n    }\n    if(event.target.innerHTML===\"JSON\"){\n      this.setState({ state:\"json\"})\n    }\n    if(event.target.innerHTML===\"SQL\"){\n      this.setState({ state:\"sql\"})\n    }\n     if(event.target.innerHTML===\"RESET\"){\n      this.setState({ state:\"RESET\"})\n    }\n  }\n  render() {\n        var { inputText, outputText,state } = this.state;\n\n        outputText='';\n        if(state==='xml'){\n            \n            try{\n               // xmlChecker.check(inputText);\n                outputText=xmlChecker.prettify(inputText);\n            }\n            catch (error){\n                outputText = \"XML Parser: \" + error.name + \" at \" + error.line + \",\" + error.column + \": \" + error.message;\n            }\n        }\n        if(state==='json'){\n            \n            try{\n                var jsObj=JSON.parse(inputText);\n                outputText=JSON.stringify(jsObj, null, \"\\t\");\n                }\n            catch (error){\n                outputText = \"JSON Parser: \" + error.message;\n            }\n        }\n        if(state==='sql'){\n                outputText=sqlFormatter.format(inputText);\n        }\n        else if(state==='RESET'){\n           this.setState({ inputText: '' });\n           this.setState({ outputText: '' });\n           this.setState({ state: '' });\n           inputText='';\n           outputText='';\n           state=''\n  \n        }\n\n  return (   \n  <div className=\"h-100 w-100 \">\n  <div class=\"topnav\">\n  <div class=\"topnav-right\">\n            <nav>\n                  <GitHubButton href=\"https://github.com/mayankpande88\" data-size=\"large\" aria-label=\"Follow @mayankpande88 on GitHub\">Follow @mayankpande88</GitHubButton>\n                </nav>\n      </div>\n</div>\n    <div className=\"flex flex-column pt4 h-100\">\n        <div className=\"flex h-100 w-100\">\n            <InputCard inputChange={this.onInputChange } inputText={inputText} state={this.state.state}/>\n            <CardButtons buttonClick={this.onButtonClick}/>\n            <OutputCard outputText={outputText} state={this.state.state}/>\n        </div>\n    </div>\n \n  </div>\n  );  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './codemirror2.css';\nimport 'codemirror/theme/material.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}